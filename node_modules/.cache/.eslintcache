[{"C:\\Users\\dixita\\projects\\VSC_Website 2\\test\\src\\ToolTip.js":"1","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\index.js":"2","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\App.js":"3","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\reportWebVitals.js":"4","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page2.js":"5","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page3.js":"6","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page1.js":"7","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\ProgressBar.js":"8","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\hiking.js":"9","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercises3.js":"10","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\header.js":"11","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercises2.js":"12","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercise1.js":"13","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\ToolTip.js":"14","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Button.js":"15","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page4.js":"16","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\summary.js":"17","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page0.js":"18","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercise0.js":"19","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Container.js":"20","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Box.js":"21","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Home.js":"22","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\HomeContent.js":"23"},{"size":402,"mtime":1687875428941,"results":"24","hashOfConfig":"25"},{"size":964,"mtime":1689365952635,"results":"26","hashOfConfig":"27"},{"size":1172,"mtime":1689710431490,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1686930623314,"results":"29","hashOfConfig":"27"},{"size":2023,"mtime":1690279206629,"results":"30","hashOfConfig":"27"},{"size":1652,"mtime":1690279212198,"results":"31","hashOfConfig":"27"},{"size":2011,"mtime":1690314166648,"results":"32","hashOfConfig":"27"},{"size":2258,"mtime":1689666804291,"results":"33","hashOfConfig":"27"},{"size":2860,"mtime":1690314595466,"results":"34","hashOfConfig":"27"},{"size":11960,"mtime":1690275458688,"results":"35","hashOfConfig":"27"},{"size":1048,"mtime":1689356578789,"results":"36","hashOfConfig":"27"},{"size":16315,"mtime":1690317696698,"results":"37","hashOfConfig":"27"},{"size":12673,"mtime":1690275394067,"results":"38","hashOfConfig":"27"},{"size":920,"mtime":1690279382838,"results":"39","hashOfConfig":"27"},{"size":800,"mtime":1690308169380,"results":"40","hashOfConfig":"27"},{"size":1748,"mtime":1690279233719,"results":"41","hashOfConfig":"27"},{"size":2203,"mtime":1690279347299,"results":"42","hashOfConfig":"27"},{"size":1711,"mtime":1690314169414,"results":"43","hashOfConfig":"27"},{"size":9994,"mtime":1690311498680,"results":"44","hashOfConfig":"27"},{"size":2100,"mtime":1690314487914,"results":"45","hashOfConfig":"27"},{"size":2176,"mtime":1690298007535,"results":"46","hashOfConfig":"27"},{"size":1444,"mtime":1690271233448,"results":"47","hashOfConfig":"27"},{"size":1871,"mtime":1690305710428,"results":"48","hashOfConfig":"27"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ljuw0f",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1olzwn5",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99","usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"55"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"55"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"55"},"C:\\Users\\dixita\\projects\\VSC_Website 2\\test\\src\\ToolTip.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\index.js",[],[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\App.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\reportWebVitals.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page2.js",["129","130"],[],"// Import required modules from 'react' and 'react-router-dom'\r\nimport React from 'react';\r\n// Import custom components\r\nimport ProgressBar from './ProgressBar'; \r\nimport Hiking from './hiking'; \r\nimport StudentExercise2 from './StudentExercises2'; \r\nimport Page3 from './page3'; \r\nimport Button from './Button';\r\nimport Header from './header';\r\nimport HikingImage from './image/climbing.jpg'; \r\nimport {Route, Routes, useNavigate} from 'react-router-dom'; // Importing required components from react-router-dom\r\n\r\n//Page 2 Component\r\nconst Page2 = () => {\r\n  const completed = 0; // Set the initial completed value here\r\n  const navigate = useNavigate(); // Using the useNavigate hook from react-router-dom\r\n\r\n  function handleOnClick(event) {\r\n    navigate('/page3'); // Navigate to '/page3' when the button is clicked\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"background-image\">\r\n        {/*background image*/}\r\n      <Hiking imageUrl={HikingImage} height = \"600px\" width = \"650px\" imagePosition={[70, -40]}creditPosition={{ bottom: 75, right: 90 }}/> {/*Render the Hiking component*/}\r\n      </div>\r\n      <div className=\"content\">\r\n        <Header title=\"STUDENT EXERCISE 2\" subtitle=\"13 MINUTES\" /> {/*Render the Header component with title and subtitle*/}\r\n        <ProgressBar bgcolor=\"#36545d\" completed={completed} /> {/*Render the ProgressBar component with bgcolor and completed prop */}\r\n\r\n        <Routes>\r\n          <Route path=\"/*\" element={<StudentExercise2 />} /> {/*Render the StudentExercise2 component for all paths*/}\r\n          <Route path=\"/page3\" element={<Page3 />} /> {/*Render the Page3 component for '/page3' path*/}\r\n        </Routes>\r\n\r\n        <div >\r\n          \r\n          {/*<button type=\"button\" onClick={handleOnClick} style={{ marginLeft: '40px', marginTop: \"25px\" }}>\r\n            Next Page\r\n          </button> {/* Render a regular button with onClick event handler */}\r\n        </div> \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page2;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page3.js",["131","132","133","134","135"],[],"// Import required modules from 'react' and 'react-router-dom'\r\nimport React from 'react';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\n// Import custom components\r\nimport ProgressBar from './ProgressBar';\r\nimport Hiking from './hiking';\r\nimport StudentExercise3 from './StudentExercises3';\r\n\r\nimport Button from './Button';\r\nimport Header from './header';\r\nimport { Box } from '@mui/material';\r\nimport HikingImage from './image/Fire.jpg';\r\n\r\n//Page 3 Component\r\nconst Page3 = () => {\r\n  const completed = 0; // Progress percentage\r\n\r\n  const navigate = useNavigate(); // React Router hook for navigation\r\n\r\n\r\n\r\n  function handleOnClick2(event) {\r\n    navigate('/'); // Navigate to the home page when the button is clicked\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"background-image\">\r\n        {/*background image*/}\r\n      <Hiking imageUrl={HikingImage} height = \"600px\" width = \"650px\"imagePosition={[70, -45]}creditPosition={{ bottom: 70, right: 90 }}/> {/* Render the Hiking component */}\r\n      </div>\r\n      <div className=\"content\">\r\n        <Header title=\"STUDENT EXERCISE 3\" subtitle=\"5 MINUTES\" /> {/* Render the Header component with title and subtitle */}\r\n        <ProgressBar bgcolor=\"#36545d\" completed={completed} /> {/* Render the ProgressBar component with background color and progress percentage */}\r\n        <StudentExercise3 /> {/* Render the StudentExercise3 component */}\r\n        <br></br>\r\n        <box>\r\n        {/* Alternative implementation using custom Button component */}\r\n        \r\n        \r\n        </box>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page3;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page1.js",["136","137","138"],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\ProgressBar.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\hiking.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercises3.js",["139","140","141","142","143","144","145"],[],"// Importing necessary dependencies and components\r\nimport React, { useState , useEffect } from 'react';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport Button from './Button';\r\nimport CustomBox from './Box';\r\n\r\n\r\nconst StudentExercise3 = () => {\r\n  // State variables\r\n  const [selectedNumber, setSelectedNumber] = useState('');\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [result, setResult] = useState('');\r\n  const [numVar, setNumVar] = useState('');\r\n  const [wordSize, setwordSize] = useState('');\r\n  const [resultMessage4, setResultMessage4] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // Function to handle input changes\r\n  const handleChange = (event) => {\r\n    const selectedOption = event.target.value;\r\n    setSelectedNumber(selectedOption);\r\n\r\n    if (selectedOption !== \"\") {\r\n      // Show the second question when the user selects an answer of first question\r\n      document.getElementById(\"question2\").style.display = \"block\";\r\n      if (selectedOption === \"1\") {\r\n        setMessage(\"Please enter a number\");\r\n      } else {\r\n        setMessage(`Please enter ${selectedOption} numbers separated by commas.`);\r\n      }\r\n    } else {\r\n      // Hide the second question if no option is selected\r\n      document.getElementById(\"question2\").style.display = \"none\";\r\n      setMessage(\"\");\r\n    }\r\n\r\n    // Store the selected option and second question visibility in local storage\r\n    localStorage.setItem(\"selectedNumber\", selectedOption);\r\n    localStorage.setItem(\"question2Visible\", selectedOption !== \"\");\r\n  };\r\n\r\n\r\n  // Function to handle form submission\r\n  //This function outputs answers based on the user's answers\r\n  const handleSubmit = () => {\r\n    // Get the value of the input field with the id \"nums\"\r\n    const numbersInput = document.getElementById(\"nums\").value; \r\n\r\n    // Split the numbersInput string using commas as separators and create an array\r\n    // Then, trim each element to remove any leading or trailing white spaces\r\n    const numbersArray = numbersInput.split(\",\").map((num) => num.trim());\r\n\r\n    // Parse the selectedNumber value into an integer\r\n    const selectedOptionNum = parseInt(selectedNumber);\r\n\r\n    // this condition checks if the user has entered all the inputs before clicking submit\r\n    if(!numVar || !wordSize || !selectedNumber){\r\n      alert(\"Please fill out all the feilds\") //This message is shown if the user has not filled out all the inputs\r\n      return;\r\n\r\n    }\r\n\r\n    // Check if number of variables and word size are integers\r\n    if (isNaN(parseInt(numVar)) ) {\r\n      alert(\"Number of variables must be integers.\"); //This message is shown when the user enters non-interger values for Question 2: Number of Variables\r\n      return;\r\n    }\r\n    \r\n    // Check if the length of the numbersArray is equal to the selectedOptionNum\r\n    if (numbersArray.length === selectedOptionNum) {\r\n      let validInputs = true; //set validInputs to true to flag valid inputs\r\n\r\n      // Check if all input numbers are valid integers\r\n      for (let i = 0; i < numbersArray.length; i++) {\r\n        const number = parseInt(numbersArray[i]);\r\n        if (isNaN(number)) {\r\n          validInputs = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (validInputs) {\r\n        // Calculate the product of all input numbers\r\n        let product = 1;\r\n\r\n        for (let i = 0; i < numbersArray.length; i++) {\r\n          const number = parseInt(numbersArray[i]);\r\n          product *= number;\r\n        }\r\n\r\n        //This line stores \"product\" variable in local storage so it can be retrieved and displayed in the summary page. \r\n        localStorage.setItem('product', product);\r\n        \r\n\r\n        //working set size (wss) is calculated by multiplying \"product\", \"numVar\" and \"wordSize\"\r\n        let wss = product * parseInt(numVar) * parseInt(wordSize)\r\n\r\n\r\n        let result = \"\" //An empty string named \"result\" is initialized which is later used to output the result message.\r\n\r\n        //string1 and string2 are concatenated at the start of the \"result\" string\r\n        const string1 = \"Next let us discuss both the return on the investment (ROI) converting your computational infrastructure to GPU-based computing and the difficulty with achieving this ROI.\"\r\n        const string2 = `\\t1. Let's first talk about Return on Investment.  You indicated that the extent of loop \\n\\t\\    bodies is approximately ${product}. You also indicated that a common loop body contains \\n\\t    ${numVar}, ${wordSize} bytes variables. This suggests that inner loops access ${wss} bytes of variables.`\r\n\r\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is greater than 75\r\n        const wss1 = `a. Because  ${wss} wss is significantly larger than the typical last level cache size. \\n\\t\\t    Your problem should achieve a ROI of approximately 3 to 4 due to the \\n\\t\\t    differences in main memory bandwidth between CPU and GPU. Would a \\n\\t\\t    reduction in the time to perform your science of 3 to 4 have a significant \\n\\t\\t    impact on your ability to perform your science?`\r\n\r\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is less than 75\r\n        const wss2 = `a. Because ${wss} wss is significantly smaller than the typical last level cache size. \\n\\t\\t    Your code is likely already running pretty efficiently on a CPU-based platform. \\n\\t\\t    GPU-enablement will yield a very modest ROI. `\r\n\r\n        result = string1 + \"\\n\" + string2 //string1 and string2 are concatentaed the \"result\" string\r\n\r\n        if (wss > 75){\r\n        // if \"wss\" is greater than 75, \"wss1\" is concatenated to the \"result\" string\r\n          result += \"\\n\\t\\t\" + wss1\r\n\r\n        } else {\r\n\r\n        // if \"wss\" is less than 75, \"wss2\" is concatenated to the \"result\" string\r\n\r\n          result += \"\\n\\t\\t\" + wss2\r\n\r\n        }\r\n        localStorage.setItem('selectedNumber', selectedNumber);\r\n        localStorage.setItem('numVar', numVar);\r\n        localStorage.setItem('wordSize', wordSize);\r\n        localStorage.setItem('inputValue', inputValue);\r\n\r\n        setResultMessage4 (result);//This statement assigns \"result\" variable to the \"ResultMessage3\" variable\r\n        localStorage.setItem('resultMessage4', result); //This line stores \"result\" variable in local storage so it can be retrieved and displayed in the summary page. \r\n        navigate('/page4'); // This line of code is used to navigate to page 4\r\n\r\n\r\n\r\n\r\n      } else {\r\n        alert(\"Please enter valid numbers separated by commas.\"); //This message is shown when user enters non-integer values for Question1\r\n      }\r\n    } else {\r\n        if (selectedOptionNum == 1){\r\n        alert(\"Please enter a number\")} //This message is shown if \"selectedOptionNum\" is 1 but user enters more or less numbers\r\n        else if (selectedNumber){\r\n        \r\n          //Below message is shown if the number of intergers entered by the user is less than or greater than \"selectedOptionNum\"\r\n        alert(`Please enter ${selectedOptionNum} numbers separated by commas.`)\r\n        }\r\n\r\n      }\r\n\r\n     \r\n\r\n  \r\n};\r\n\r\n  \r\n// Function to clear options and reset the form\r\n  const handleClear = () => {\r\n\r\n    setSelectedNumber('');\r\n    setMessage(\"\");\r\n    setInputValue(\"\");\r\n    setResult(\"\");\r\n    setResultMessage4 (\"\");\r\n    setwordSize(\" \")\r\n    setNumVar(\"\")\r\n    document.getElementById(\"question2\").style.display = \"none\";\r\n\r\n};\r\n\r\nfunction handleOnClick3(event) {\r\n  navigate('/page4');\r\n};\r\n\r\n\r\nfunction handleOnClick(event) {\r\n  navigate('/page2'); // Navigate to '/page2' when the button is clicked\r\n};\r\n\r\nuseEffect(() => {\r\n  // Load data from local storage when the component mounts\r\n  const selectedOption = localStorage.getItem('selectedNumber');\r\n  const numVarValue = localStorage.getItem('numVar');\r\n  const wordSizeValue = localStorage.getItem('wordSize');\r\n  const inputValueValue = localStorage.getItem('inputValue');\r\n  const question2Visible = localStorage.getItem('question2Visible'); // Retrieve the second question visibility\r\n\r\n  setSelectedNumber(selectedOption || ''); // Use empty string as default if null or undefined\r\n  setNumVar(numVarValue || '');\r\n  setwordSize(wordSizeValue || '');\r\n  setInputValue(inputValueValue || '');\r\n\r\n   // Set the visibility of the second question based on the value retrieved from local storage\r\n   if (question2Visible === \"true\") {\r\n    document.getElementById(\"question2\").style.display = \"block\";\r\n  } else {\r\n    document.getElementById(\"question2\").style.display = \"none\";\r\n  }\r\n}, []);\r\n\r\n\r\n  return (\r\n    <div >\r\n\r\n      <div >\r\n      <CustomBox width =\"500px\" height= \"550px\">\r\n        <ol>\r\n          {/*Question 1 */}\r\n          <li>How many levels of nesting are there?</li><br></br>\r\n\r\n          <select id=\"mySelect\" value={selectedNumber} onChange={handleChange}>\r\n            <option disabled selected value=\"\">\r\n              Choose a number\r\n            </option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"5\">5</option>\r\n          </select>\r\n\r\n          <br />\r\n          {/*Question 1a- This question is displayed after the user selects an option for question 1*/}\r\n          <div id=\"question2\" style={{ display: 'none' }}>\r\n            <p id=\"message2\">{message}</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"nums\"\r\n              placeholder=\"Enter Here\"\r\n              value={inputValue}\r\n              onChange={(event) => setInputValue(event.target.value)}\r\n            /> \r\n      \r\n          {/*<p style = {{marginTop:\"40px\"}}>What kind of Return on Investment (ROI) would you expect?</p>*/}\r\n      \r\n          </div><br></br>\r\n        <div>\r\n          {/*Question 2*/}\r\n        <li>How many variables are typically found in a loopbody expressions ? </li> <br></br>\r\n        <input\r\n          type=\"text\"\r\n          value={numVar}\r\n          placeholder=\"Enter Here\"\r\n          onChange={(e) => setNumVar(e.target.value)}\r\n          \r\n        /></div><br></br>\r\n        {/*Question 3 */}\r\n        <li>Are you using 4 byte or 8 bytes floating point values ? </li><br></br>\r\n      \r\n          <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"wordsize\"\r\n                value=\"4\"\r\n                checked={wordSize === \"4\"}\r\n                onChange={(e) => setwordSize(e.target.value)}\r\n              />\r\n                4 Bytes\r\n          </label>\r\n\r\n  \r\n          <label style={{ marginLeft: '70px' }}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"wordsize\"\r\n                value=\"8\"\r\n                checked={wordSize === \"8\"}\r\n                onChange={(e) => setwordSize(e.target.value)}\r\n                />\r\n              8 Bytes\r\n          </label>\r\n         \r\n\r\n\r\n\r\n\r\n        </ol>\r\n        </CustomBox>\r\n                \r\n        <div style = {{marginLeft: \"249px\", marginBottom: \"100px\"}}>\r\n          <Button text=\"Back\" onClick={handleOnClick} style={{ padding: \"10px 28px\" }} /> {/* Render a button with 'Back' text, handleOnClick event handler, and custom styling */}\r\n            {/*Submit Button*/}\r\n            \r\n\r\n            {/*Clear Button*/}\r\n            <Button text = \"Clear\" onClick = {handleClear} style ={{ marginLeft : \"10px\" , marginRight:\"10px\"}}/>\r\n            <Button text = \"Submit\" onClick = {handleSubmit} />\r\n            \r\n          </div> <br></br><br></br>\r\n          {/*Get Results Button - Takes the user to the summary page*/}\r\n          {/*<Button text = \"Get Results\" onClick = {handleOnClick3} style = {{ padding: \"10px 28px\"}}/>*/}\r\n          \r\n      </div>\r\n\r\n\r\n\r\n\r\n      \r\n      \r\n\r\n      {/*<p>What kind of Return on Investment (ROI) would you expect?</p>*/}\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentExercise3;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\header.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercises2.js",["146","147","148","149","150","151","152","153","154"],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercise1.js",["155","156","157","158","159","160","161","162","163","164"],[],"// Importing necessary dependencies and components\r\nimport React, { useState, useEffect } from 'react';\r\nimport CustomTooltip from './ToolTip';\r\nimport Button from './Button';\r\nimport Summary from './summary';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport CustomBox from './Box';\r\n\r\n\r\nconst StudentExercise1 = () => {\r\n  // State variables\r\n  const [answer2, setAnswer2] = useState('');\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [resultMessage2, setResultMessage2] = useState('');\r\n  const [volume, setVolume] = useState('');\r\n  const [frequency, setFrequency] = useState('');\r\n  const [inputOne, setInputOne] = useState(localStorage.getItem('inputOne') || '');\r\n  const [inputTwo, setInputTwo] = useState(localStorage.getItem('inputTwo') || '');\r\n  const [divisionResult, setDivisionResult] = useState('');\r\n  const [iofreq, setIOfreq] = useState(\"\")\r\n  const threshold = 50;\r\n  const navigate = useNavigate();\r\n \r\n\r\n\r\n // Function to handle input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'volume') {\r\n      setVolume(value);\r\n      localStorage.setItem('IOVolume', value);\r\n    } else if (name === 'frequency') {\r\n      setFrequency(value);\r\n      localStorage.setItem('IOFrequency', value);\r\n    } else if (name === 'answer2') {\r\n      setAnswer2(value);\r\n      localStorage.setItem('RateThroughput', value);\r\n    } else if (name === 'inputOne') {\r\n      setInputOne(value);\r\n      localStorage.setItem('InputOne', value);\r\n    } else if (name === 'inputTwo') {\r\n      setInputTwo(value);\r\n      localStorage.setItem('InputTwo', value);\r\n\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n// Function to handle form submission\r\n//This function outputs answers based on the user's  answers\r\n\r\n  const handleSubmit = (e) => {\r\n    \r\n\r\n\r\n      if (inputOne && inputTwo && volume && frequency && answer2) {// this condition checks if the user has entered all the inputs before clicking submit\r\n        setSubmitted(true);\r\n\r\n\r\n        const x = parseFloat(inputOne); //converting string inputs to intergers\r\n        const y = parseFloat(inputTwo);\r\n        const w = parseFloat(volume)\r\n        const z = parseFloat(frequency)\r\n\r\n        if (!isNaN(x) && !isNaN(y) && !isNaN(w) && !isNaN(z)){\r\n          const division = x / y; //calculating division result\r\n          const iof = w / z; // calculating IOfreq by dividing volume with frequency \r\n\r\n        \r\n          let result = \"\" //An empty string is initialized which is later used to output the result message.\r\n\r\n          //Below string is shown when the division result is greater than 50, iofreq is less than 100 and throughput is chosen  \r\n          const start1 = `Based on your input, it appears that your science objective is amenable to GPU-based computing. This assessment is based on several of your answers:`\r\n          //Below string is shown when division result is greater than 50\r\n          const True1 = `The number of grid points of ${divisionResult} per GPU or node is sufficient.Typically, a GPU based \\n\\t    computing solution requires in excessive of ${threshold} grid points per GPU`\r\n\r\n          //Below string is shown when iofreq is less than 100\r\n          const True2 = `GPU’s are designed for computationally heavy problems.\\n You indicated that you \\n\\t\\t    perform approximately ${volume} Mbytes of disk I/O every ${frequency} seconds. It sounds like a significant percentage of time for your application is spent performing computations. This is necessary but not sufficient condition for the efficient use of GPU-based computing.`\r\n\r\n\r\n          //Below string is shown if either division result is less than 50 OR iofreq is greater than 100 OR rate is chosen\r\n          const start2 = `Based on your input, it does not appear that your science objective is amenable to GPU-based computing.This assessment is based on several of your answers:`\r\n\r\n          //Below string is shown if division result is less than 50\r\n          const False1 = `The number of grid points per GPU or node is rather low ${divisionResult}. Typically, a GPU based \\n\\t    computing solution requires in excess of ${threshold} grid points per GPU. What can I do \\n\\t    about this?\\n\\t\\ta. Is the size of your problem sufficient to address your science objective or is it a \\n\\t\\t    limitation of your existing compute solution. If it is sufficient to address your \\n\\t\\t    science objective, then there does not appear to be an advantage of GPU-\\n\\t\\t    based solution versus a CPU-based solution. If it is not sufficient, then a GPU-\\n\\t\\t    based solution may enable improvement of the fidelity of your simulations.`\r\n          \r\n            //Below string is shown if iofrq is greater than 100\r\n          const False2 = `GPU’s are designed for computationally heavy problems. You indicated that \\n\\t    you perform approximately ${volume} Mbytes of disk I/O every ${frequency} seconds. \\n\\t    A significant percentage of time for your application will likely be spent moving data \\n\\t    from the GPU memory to the disk subsystem. What can I do about this? \\n\\t    Can you reduce the amount of I/O that your application performs`\r\n          //Below string is shown if rate is chosen\r\n          const False3 = `You indicated that your problem has a [[strong, moderate, weak} ${answer2} limitation. \\n\\t    While GPU-based computing can successfully be used for both rate and throughput \\n\\t    computing tasks, it frequently does better for throughput based computing.`\r\n\r\n\r\n          let num = 0//This variables is used to create an ordered list for the output. \r\n          //num increments as the number of \"No\"s chosen by the user go up\r\n        \r\n          if ( division > 50 && iof < 100 && answer2 == \"throughput\"){ \r\n            //if division result is greater than 50, iofreq is less than 100 and throuhgput is chosen, \"start1\", \"True1\" and \"True2\" are concatenated\r\n            result = start1 + \"\\n\\t\" + \"a. \" + True1 + \"\\n\\t\"+ \"b. \"+ True2\r\n          }\r\n          else{\r\n            //if division result is less than 50 OR iofreq is greater than 100 OR rate is chosen, then \"start2\" is set to the empty \"result\" string\r\n            result = start2 \r\n          }\r\n\r\n          if (division < 50){\r\n            //if division is less than 50, num is incremented and concatenated to the result string alog with \"False1\" \r\n            num +=1\r\n            result += \"\\n\\t\"+ num + \". \" + False1\r\n          }\r\n\r\n          if (iof > 100){\r\n             //if iofreq is greater than 100, num is incremented and concatenated to the result string alog with \"False2\" \r\n            num +=1\r\n            result += \"\\n\\t\"+ num + \". \" + False2\r\n          }\r\n\r\n          if(answer2 == \"rate\"){\r\n             //if rate is chosen, num is incremented and concatenated to the result string alog with \"False3\" \r\n            num +=1\r\n            result += \"\\n\\t\"+ num + \". \" + False3\r\n          }\r\n\r\n\r\n          setDivisionResult(division); //This statement assigns \"division\" variable to the \"divisionResult\" variable\r\n          localStorage.setItem('divisionResult', division); //This line stores \"division\" in local storage so it can be retrieved and displayed in the summary page. \r\n          setIOfreq(iof);//This statement assigns \"iof\" variable to the \"iofreq\" variable\r\n          localStorage.setItem('iofreq', iof);//This line stores \"iof\" in local storage so it can be retrieved and displayed in the summary page. \r\n          setResultMessage2 (result);//This statement assigns \"result\" variable to the \"ResultMessage2\" variable\r\n          localStorage.setItem('resultMessage2', result); //This line stores \"result\" in local storage so it can be retrieved and displayed in the summary page. \r\n          navigate('/page2'); // This line of code is used to navigate to page 2\r\n        }\r\n\r\n        \r\n        \r\n      } else{\r\n        \r\n        alert('Please answer all questions.');//This message is shown when the user does not answer all the questions\r\n      }\r\n\r\n\r\n      \r\n    \r\n    e.preventDefault();\r\n  };\r\n\r\n\r\n// Function to clear options and reset the form\r\n  const clearOptions = (e) => {\r\n    e.preventDefault();\r\n    setAnswer2('');\r\n    setDivisionResult(\"\");\r\n    setResultMessage2 (\"\");\r\n    setInputOne(\"\")\r\n    setInputTwo(\"\")\r\n    setVolume(\"\")\r\n    setFrequency(\"\")\r\n\r\n  };\r\n\r\n  function handleOnClick2(event) {\r\n    navigate('/page0'); // Function to navigate back to the home page\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedVolume = localStorage.getItem('IOVolume') || '';\r\n    const storedFrequency = localStorage.getItem('IOFrequency') || '';\r\n    const storedAnswer2 = localStorage.getItem('RateThroughput') || '';\r\n    const storedInputOne = localStorage.getItem('InputOne') || '';\r\n    const storedInputTwo = localStorage.getItem('InputTwo') || '';\r\n\r\n    setVolume(storedVolume);\r\n    setFrequency(storedFrequency);\r\n    setAnswer2(storedAnswer2);\r\n    setInputOne(storedInputOne);\r\n    setInputTwo(storedInputTwo);\r\n  }, []);\r\n\r\n\r\n\r\n  return (\r\n    <div style = {{ alignment : \"center\"}}>\r\n      \r\n\r\n      <form onSubmit={handleSubmit}>\r\n      <CustomBox width =\"500px\" height= \"550px\">\r\n        <div>\r\n                    \r\n          <div>\r\n            <ol>\r\n              {/*Question 1 - Independent grid points per run*/}\r\n              <li>Determine the following:</li>\r\n              \r\n            \r\n            </ol>\r\n          </div>\r\n          \r\n          <ol start={2}>\r\n           {/*Question 1 - input1*/}\r\n          <label>Total number of independent grid-points: <br></br>\r\n        <input\r\n          type=\"text\"\r\n          value={inputOne}\r\n          onChange={handleInputChange}\r\n          name=\"inputOne\"\r\n          \r\n        /></label>\r\n        <br />\r\n        <br />\r\n         {/*Question 1 - input2*/}\r\n        <label>Number of &#123;node, GPU&#125;: per run: <br></br>\r\n        <input\r\n          type=\"text\"\r\n          value={inputTwo}\r\n          name=\"inputTwo\"\r\n          onChange= {handleInputChange}\r\n        /></label>\r\n        <br />\r\n        <br />\r\n            <li><div style={{ display: 'flex', alignItems: 'center' }}>\r\n               {/*Question 2 - I/O Frequency*/}\r\n                What is the volume and frequency of I/O?\r\n                <CustomTooltip title=\"Best explanation you can find for I/O frequency and Volume\" placement=\"right\" />\r\n              </div></li>\r\n              {/*Question 2 input1 - volume*/}\r\n              <label>Volume:<br></br>\r\n              <input\r\n                type=\"text\"\r\n                name=\"volume\"\r\n                value={volume}\r\n                onChange={handleInputChange}\r\n              /> <br></br><br></br>\r\n              </label>\r\n       \r\n\r\n            <label>\r\n              {/*Question 2 input1 - frequency*/}\r\n              Frequency:<br></br>\r\n              <input\r\n                type=\"text\"\r\n                name=\"frequency\"\r\n                value={frequency}\r\n                onChange={handleInputChange}\r\n              />\r\n            </label>\r\n            <br></br><br></br>\r\n            <li><div style={{ display: 'flex', alignItems: 'center' }}>\r\n\r\n                {/*Question 3 - rate or throughput*/}\r\n                Do you have rate or throughput limitations?\r\n                <CustomTooltip title=\"A really good explanation of rate and throughput\" placement=\"right\" />\r\n              </div></li> \r\n            <br></br>\r\n            <div id=\"options2\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer2\"\r\n                  value=\"rate\"\r\n                  checked={answer2 === 'rate'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Rate\r\n              </label>\r\n              <label style = {{marginLeft: \"60px\"}}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer2\"\r\n                  value=\"throughput\"\r\n                  checked={answer2 === 'throughput'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Throughput\r\n              </label> \r\n              <br></br>\r\n            </div>\r\n          </ol>\r\n        \r\n        </div><br></br>\r\n        </CustomBox>\r\n        <div style = {{marginLeft: \"253.5px\", marginBottom: \"100px\"}}>\r\n        <Button text=\" Back \" onClick={handleOnClick2}  />\r\n        \r\n        <Button text = \"Clear\" onClick = {clearOptions} style ={{ marginLeft : \"10px\" , marginRight:\"10px\"}} />{/*Clear Button*/}\r\n        <Button text=\"Next\"/> {/*Submit Button*/}\r\n        \r\n        </div>\r\n        </form><br></br>\r\n\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentExercise1;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\ToolTip.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Button.js",["165","166"],[],"import React from 'react';\r\n//Button component begins here\r\nconst Button = ({ text, onClick, style}) => {\r\n  const buttonStyle = {\r\n    backgroundColor: '#36545d', /* Set your desired background color */\r\n    color: 'white', /* Set the text color */\r\n    border: 'none', /* Remove the button border */\r\n    padding: '10px 28px', /* Adjust the paadding as needed */\r\n    fontSize: '16px', /* Set the font size */\r\n    cursor: 'pointer', /* Add a cursor pointer on hover */\r\n    borderRadius: '5px',\r\n    marginLeft: 0,\r\n    ... style\r\n  };\r\n\r\n  const hoverStyle = {\r\n    backgroundColor: '#45a049', /* Change the background color on hover */\r\n  };\r\n\r\n  return (\r\n    <button \r\n      style={buttonStyle}\r\n      onClick={onClick}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page4.js",["167","168","169"],[],"// Import required modules from 'react' and 'react-router-dom'\r\nimport React from 'react';\r\n// Import custom components\r\nimport ProgressBar from './ProgressBar';\r\nimport Hiking from './hiking';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport Button from './Button';\r\nimport Summary from './summary';\r\nimport Header from './header';\r\nimport CustomContainer from './Container';\r\n\r\n// Page 4  Component\r\nconst Page4 = (props) => {\r\n    const completed = 0; // Variable to track progress completion\r\n    const navigate = useNavigate(); // Hook to access navigation functionality\r\n\r\n    // Function to handle button click event\r\n    function handleOnClick2(event) {\r\n        navigate('/'); // Navigate to the home page\r\n    }\r\n\r\n    // JSX code for rendering the component\r\n    return (\r\n        <div className=\"container\">\r\n           \r\n            <div className=\"content\" >\r\n                \r\n                <Header title=\"Summary Page\" subtitle=\"These are your results\" />\r\n                <ProgressBar bgcolor=\"#36545d\" completed={completed} /> {/* Progress bar component */}\r\n                <CustomContainer> <Summary /> {/* Summary component */} </CustomContainer>\r\n                \r\n                <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>\r\n                <Button\r\n                    text=\"Home\"\r\n                    onClick={handleOnClick2}\r\n                    style={{ padding: \"10px 28px\", marginTop: \"20px\", marginBottom: \"100px\", alignItems: 'center'}}\r\n                /> {/* Button component for navigating to the home page */}\r\n               \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page4; // Export the Page4 component\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\summary.js",["170","171"],[],"// Importing react and necessary dependencies \r\nimport React, { useState } from 'react';\r\nimport HikingImage from './image/goal.jpg';\r\nimport CustomBox from './Box';\r\n\r\nconst Summary = () => {\r\n  // Retrieving data from local storage\r\n  const resultMessage = localStorage.getItem(\"resultMessage\");\r\n  const resultMessage2 = localStorage.getItem(\"resultMessage2\");\r\n  const resultMessage3 = localStorage.getItem(\"resultMessage3\");\r\n  const resultMessage4 = localStorage.getItem(\"resultMessage4\");\r\n  \r\n  return (\r\n    <div style={{ alignment: \"center\", paddingLeft: \"35px\", paddingRight: \"60px\", marginLeft: \"40px\", whiteSpace: 'pre-wrap' }}>\r\n      {/* Displaying the results from different pages */}\r\n      <div style={{ textAlign: \"center\" }}>\r\n        {/*image*/}\r\n        <img src={HikingImage} style={{ width: \"500px\", height: \"500px\", borderRadius: \"50%\", marginTop: \"30px\", marginBottom: \"80px\", border: \"20px solid #fff\" }} />\r\n      </div>\r\n      {/*Result from Page 0*/}\r\n      <div style={{ marginBottom: \"40px\" }}>\r\n        <CustomBox bgcolor=\"white\" color=\"black\" padding=\"50px\" font=\"22px\" style={{ margin: 'auto' }}>\r\n          {resultMessage && <p style={{ margin: \"0px\" }}>Page 0 result: <br></br>{resultMessage}</p>}\r\n        </CustomBox>\r\n      </div>\r\n      {/*Result from Page 1*/}\r\n      <div style={{ marginBottom: \"40px\" }}>\r\n        <CustomBox bgcolor=\"white\" color=\"black\" padding=\"50px\" font=\"22px\" style={{ margin: 'auto' }}>\r\n          {resultMessage2 && <p>Page 1 result: <br></br>{resultMessage2}</p>}\r\n        </CustomBox>\r\n      </div>\r\n      {/*Result from Page 2*/}\r\n      <div style={{ marginBottom: \"40px\" }}>\r\n      <CustomBox bgcolor=\"white\" color=\"black\" padding=\"50px\" font=\"22px\" style={{ margin: 'auto' }}>\r\n        {resultMessage3 && <p>Page 2 result: <br></br>{resultMessage3}</p>}\r\n      </CustomBox>\r\n      </div>\r\n      {/*Result from Page 3*/}\r\n      <div style={{ marginBottom: \"60px\" }}>\r\n      <CustomBox bgcolor=\"white\" color=\"black\" padding=\"50px\" font=\"22px\" style={{ margin: 'auto' }}>\r\n        {resultMessage4 && <p>Page 3 result: <br></br>{resultMessage4}</p>}\r\n      </CustomBox>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\page0.js",["172"],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\StudentExercise0.js",["173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],[],"// Importing necessary dependencies and components\r\nimport React, { useState, useEffect} from 'react';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport CustomTooltip from './ToolTip';\r\nimport Button from './Button';\r\nimport Summary from './summary';\r\nimport CustomBox from './Box';\r\nimport { Box } from '@mui/material';\r\nimport HomeContent from './HomeContent';\r\n\r\n\r\n\r\n\r\n\r\nconst StudentExercise0 = () => {\r\n  // State variables\r\n  const [answer, setAnswer] = useState(localStorage.getItem('answer') || '');\r\n  const [answer2, setAnswer2] = useState(localStorage.getItem('answer2') || '');\r\n  const [answer3, setAnswer3] = useState(localStorage.getItem('answer3') || '');\r\n  const [answer4, setAnswer4] = useState(localStorage.getItem('answer4') || '');\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [resultMessage, setResultMessage] = useState('');\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    setAnswer(localStorage.getItem('answer') || '');\r\n    setAnswer2(localStorage.getItem('answer2') || '');\r\n    setAnswer3(localStorage.getItem('answer3') || '');\r\n    setAnswer4(localStorage.getItem('answer4') || '');\r\n  }, []);\r\n  \r\n  \r\n\r\n  // Function to handle input changes\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'answer') {\r\n      setAnswer(value);\r\n    } else if (name === 'answer2') {\r\n      setAnswer2(value);\r\n    } else if (name === 'answer3') {\r\n      setAnswer3(value);\r\n    } else if (name === 'answer4') {\r\n      setAnswer4(value);\r\n    }\r\n    // Store the updated values in local storage\r\n    localStorage.setItem(name, value);\r\n  };\r\n\r\n\r\n  \r\n \r\n\r\n  // Function to handle form submission\r\n  //This function outputs answers based on the user's yes/no answers\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (answer && answer2 && answer3 && answer4 ) {\r\n      setSubmitted(true);\r\n      const start = `Based on your answers, it appears that there is still some work that needs to be done before you can start the process of GPU-enablement.In particular the following steps should be done first:`; //This string is shown if user chooses one or more \"No\"s \r\n      const string1 = 'Create a Makefile'; //This string is displayed if the user chooses No for Question 1\r\n      const string2 = 'Add the ability to flexibly execute the code by other users'; //This string is displayed if the user chooses No for Question 2\r\n      const string3 = 'Add your code  into revision control system like Git'; //This string is displayed if the user chooses No for Question 3\r\n      const string4 = `Develop a verification framework that allows the identification of non-bit-for-bit \\n\\t    answer changes from software bugs` ; //This string is displayed if the user chooses No for Question 4\r\n      let num = 0 //This variables is used to create an ordered list for the output. \r\n      //num increments as the number of \"No\"s chosen by the user go \r\n      \r\n      \r\n  \r\n\r\n      let result = \"\" ; //An empty string is initialized which is later used to output the result message.\r\n\r\n\r\n      if (answer == \"yes\" && answer2 == \"yes\" && answer3 == \"yes\" && answer4 == \"yes\"){ \r\n        result = 'Your application is a good match for GPU enabled computing! :)' //When user choses all \"Yes\"s, this string is displayed\r\n      }\r\n      else {\r\n        result = start //If the user choose one or more \"No\"s, the \"start\" string is set to the empty \"result\" string\r\n      }\r\n\r\n      if(answer == \"no\"){\r\n        num += 1 //Since the answer is no, num is incremented and concatenated to the first string\r\n        result += '\\n\\t' + num + \". \" + string1 //If the first answer is no, then string1  is concatenated to the \"result\" string\r\n      }\r\n\r\n      if(answer2 == \"no\"){\r\n        num += 1 //Since the answer is no, num is incremented and concatenated to the second string\r\n        result += \"\\n\\t\"+ num + \". \" + string2 //If the second answer is no, then string2 is concatenated to the \"result\" string\r\n      }\r\n      if(answer3 == \"no\"){\r\n        num += 1 //Since the answer is no, num is incremented and concatenated to the first string\r\n        result += \"\\n\\t\"+ num + \". \" + string3 //If the third answer is no, then string3 is concatenated to the \"result\" string\r\n      }\r\n\r\n      if(answer4 == \"no\"){\r\n        num += 1 //Since the answer is no, num is incremented and concatenated to the first string\r\n        result += \"\\n\\t\"+ num + \". \" + string4\r\n        \r\n         //If the second answer is no, then string4 is concatenated to the \"result\" string\r\n      }\r\n      \r\n      setResultMessage (result); //This statement assigns \"result\" variable to the \"ResultMessage\" variable\r\n      localStorage.setItem('resultMessage', result); //This line stores result in local storage so it can be retrieved and displayed in the summary page. \r\n      navigate('/page1'); // This line of code is used to navigate to page 1\r\n     \r\n    } else {\r\n      alert('Please answer all questions.'); //This message is shown when the user does not answer all the questions\r\n    }\r\n  };\r\n\r\n  // Function to clear options and reset the form\r\n  const clearOptions = (e) => {\r\n    e.preventDefault();\r\n    setAnswer('');\r\n    setAnswer2('');\r\n    setAnswer3('');\r\n    setAnswer4('');\r\n    setResultMessage (\"\");\r\n    setShowAnswers(false);\r\n  };\r\n\r\n  function handleOnClick2(event) {\r\n    navigate('/'); // Function to navigate back to the home page\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <form onSubmit={handleSubmit} style = {{ alignment: \"center\"}}>\r\n        <CustomBox width =\"500px\" height= \"550px\">\r\n        <div>\r\n          <ol>\r\n            <br></br>\r\n            <li><div style={{ display: 'flex', alignItems: 'center' }}>\r\n              {/* Question 1 - MakeFile */}\r\n              Do you have a Makefile created for your code?\r\n                <CustomTooltip title=\"This is the best way to explain make file\" placement=\"right\" />\r\n              </div></li><br></br>\r\n            \r\n            <div id=\"options\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer\"\r\n                  value=\"yes\"\r\n                  checked={answer === 'yes'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Yes\r\n              </label>\r\n              <label style = {{marginLeft: \"60px\"}}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer\"\r\n                  value=\"no\"\r\n                  checked={answer === 'no'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                No\r\n              </label>\r\n            </div><br></br>\r\n            {/* Question 2 - Flexibility*/}\r\n            <li>Do you have the ability to flexibly execute your code by other users?</li><br></br>\r\n            <div id=\"options2\">\r\n          \r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer2\"\r\n                  value=\"yes\"\r\n                  checked={answer2 === 'yes'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Yes\r\n              </label>\r\n              <label style = {{marginLeft: \"60px\"}}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer2\"\r\n                  value=\"no\"\r\n                  checked={answer2 === 'no'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                No\r\n              </label>\r\n            </div><br></br>\r\n            {/* Question 3 - Git */}\r\n            <li>Is your code in a revision control system like Git?</li><br></br>\r\n            <div id=\"options3\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer3\"\r\n                  value=\"yes\"\r\n                  checked={answer3 === 'yes'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Yes\r\n              </label>\r\n              <label style = {{marginLeft: \"60px\"}}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer3\"\r\n                  value=\"no\"\r\n                  checked={answer3 === 'no'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                No\r\n              </label>\r\n            </div><br></br>\r\n            {/* Question 4 - non-bit-for-bit*/}\r\n            <li>Do you have a way to determine non-bit-for-bit answer changes from software bugs? </li><br></br>\r\n            <div id=\"options4\">\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer4\"\r\n                  value=\"yes\"\r\n                  checked={answer4 === 'yes'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                Yes\r\n              </label>\r\n              <label style = {{marginLeft: \"60px\"}}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"answer4\"\r\n                  value=\"no\"\r\n                  checked={answer4 === 'no'}\r\n                  onChange={handleInputChange}\r\n                />{' '}\r\n                No\r\n              </label>\r\n            </div><br></br>\r\n                \r\n          </ol>\r\n        </div><br></br>\r\n        </CustomBox>\r\n        {/*<Box sx={{ width: '60px', height: '40px', border: '1px solid black', marginLeft:\"623px\" }}></Box>*/}\r\n\r\n      \r\n        <div style = {{marginLeft: \"253.5px\", marginBottom: \"100px\"}}>\r\n        <Button text=\" Back \" onClick={handleOnClick2}/>\r\n        <Button text=\"Clear\" onClick={clearOptions} style ={{ marginLeft : \"10px\" , marginRight:\"10px\"}}/>{/*Clear Button*/}\r\n        <Button text=\"Next\" style = {{ }}/> {/*Submit Button*/}\r\n        \r\n        \r\n        \r\n       \r\n        </div>\r\n        \r\n      </form><br></br>\r\n  \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentExercise0;  \r\n\r\n\r\n","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Container.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Box.js",[],[],"C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\Home.js",["189","190"],[],"// Import required modules from 'react' and 'react-router-dom'\r\nimport React from 'react';\r\nimport { Route, Routes, useNavigate } from 'react-router-dom';\r\n\r\n// Import custom components\r\n\r\nimport Hiking from './hiking';\r\nimport Page0 from './page0';\r\nimport Header from './header';\r\nimport Button from './Button';\r\nimport HomeContent from './HomeContent';\r\nimport HikingImage from './image/hiking.jpg';\r\n\r\n\r\n// Page0 component\r\nconst HomePage = () => {\r\n  const navigate = useNavigate(); \r\n\r\n  // Function to handle button click and navigate to page1\r\n  function handleClick(event) {\r\n    navigate('/page0');\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <div className=\"content\">\r\n        {/* Header component */}\r\n        <Header title=\"HOME PAGE\" subtitle=\"5 MINUTES\" />\r\n        <div className=\"background-image\">\r\n        <Hiking imageUrl={HikingImage} height = \"520px\" width = \"825px\" imagePosition={[45, -40]} creditPosition={{ bottom: 75, right: -60 }}/>\r\n        </div>\r\n        <Routes>\r\n          {/* Route for StudentExercise0 */}\r\n          <Route path=\"/\" element={<HomeContent/>} />\r\n          {/* Route for Page1 */}\r\n          <Route path=\"/page0\" element={<Page0 />} />\r\n        </Routes>\r\n        {/* Next page button */}\r\n        {/*<button type=\"button\" onClick={handleClick} style={{ marginLeft: '40px' }}>\r\n          Next Page\r\n  </button>*/}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;","C:\\Users\\dixita\\projects\\NCAR-Project6\\src\\HomeContent.js",["191","192","193","194"],[],"// Import required modules from 'react' and 'react-router-dom'\r\nimport React from 'react';\r\nimport { Route, Routes, useNavigate } from 'react-router-dom';\r\nimport CustomBox from './Box';\r\n// Import custom components\r\nimport Button from './Button';\r\nimport { Box } from '@mui/material';\r\nimport StudentExercise0 from './StudentExercise0';\r\n// Page0 component\r\nconst HomeContent = () => {\r\n  const navigate = useNavigate();\r\n\r\n\r\n\r\n\r\n  // Function to handle button click and navigate to page1\r\n  function handleClick(event) {\r\n    navigate('/page0');\r\n    localStorage.clear();\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div  >\r\n      {/*HomePge Content*/}\r\n      <CustomBox width =\"500px\" height= \"550px\"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n      </CustomBox>\r\n      \r\n      {/*Button Component*/}\r\n      <Button\r\n        text=\"Start Evaluation\"\r\n        onClick={handleClick}\r\n        style={{  marginLeft :\"320px\", marginBottom:\"100px\"}}\r\n      />\r\n      \r\n    </div>\r\n    \r\n\r\n  );\r\n};\r\n\r\nexport default HomeContent;\r\n",{"ruleId":"195","severity":1,"message":"196","line":8,"column":8,"nodeType":"197","messageId":"198","endLine":8,"endColumn":14},{"ruleId":"195","severity":1,"message":"199","line":18,"column":12,"nodeType":"197","messageId":"198","endLine":18,"endColumn":25},{"ruleId":"195","severity":1,"message":"200","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":3,"column":16,"nodeType":"197","messageId":"198","endLine":3,"endColumn":22},{"ruleId":"195","severity":1,"message":"196","line":9,"column":8,"nodeType":"197","messageId":"198","endLine":9,"endColumn":14},{"ruleId":"195","severity":1,"message":"202","line":11,"column":10,"nodeType":"197","messageId":"198","endLine":11,"endColumn":13},{"ruleId":"195","severity":1,"message":"203","line":22,"column":12,"nodeType":"197","messageId":"198","endLine":22,"endColumn":26},{"ruleId":"195","severity":1,"message":"196","line":12,"column":8,"nodeType":"197","messageId":"198","endLine":12,"endColumn":14},{"ruleId":"195","severity":1,"message":"204","line":13,"column":8,"nodeType":"197","messageId":"198","endLine":13,"endColumn":17},{"ruleId":"195","severity":1,"message":"205","line":20,"column":12,"nodeType":"197","messageId":"198","endLine":20,"endColumn":23},{"ruleId":"195","severity":1,"message":"200","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":3,"column":16,"nodeType":"197","messageId":"198","endLine":3,"endColumn":22},{"ruleId":"195","severity":1,"message":"206","line":13,"column":10,"nodeType":"197","messageId":"198","endLine":13,"endColumn":16},{"ruleId":"195","severity":1,"message":"207","line":16,"column":10,"nodeType":"197","messageId":"198","endLine":16,"endColumn":24},{"ruleId":"208","severity":1,"message":"209","line":104,"column":119,"nodeType":"210","messageId":"211","endLine":104,"endColumn":120,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":141,"column":31,"nodeType":"215","messageId":"216","endLine":141,"endColumn":33},{"ruleId":"195","severity":1,"message":"217","line":171,"column":10,"nodeType":"197","messageId":"198","endLine":171,"endColumn":24},{"ruleId":"195","severity":1,"message":"200","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":3,"column":16,"nodeType":"197","messageId":"198","endLine":3,"endColumn":22},{"ruleId":"195","severity":1,"message":"218","line":10,"column":10,"nodeType":"197","messageId":"198","endLine":10,"endColumn":21},{"ruleId":"195","severity":1,"message":"206","line":11,"column":10,"nodeType":"197","messageId":"198","endLine":11,"endColumn":16},{"ruleId":"195","severity":1,"message":"219","line":17,"column":10,"nodeType":"197","messageId":"198","endLine":17,"endColumn":24},{"ruleId":"195","severity":1,"message":"220","line":19,"column":9,"nodeType":"197","messageId":"198","endLine":19,"endColumn":21},{"ruleId":"213","severity":1,"message":"214","line":115,"column":17,"nodeType":"215","messageId":"216","endLine":115,"endColumn":19},{"ruleId":"213","severity":1,"message":"214","line":125,"column":17,"nodeType":"215","messageId":"216","endLine":125,"endColumn":19},{"ruleId":"213","severity":1,"message":"214","line":135,"column":17,"nodeType":"215","messageId":"216","endLine":135,"endColumn":19},{"ruleId":"195","severity":1,"message":"221","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":15},{"ruleId":"195","severity":1,"message":"200","line":6,"column":9,"nodeType":"197","messageId":"198","endLine":6,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":6,"column":16,"nodeType":"197","messageId":"198","endLine":6,"endColumn":22},{"ruleId":"195","severity":1,"message":"222","line":13,"column":10,"nodeType":"197","messageId":"198","endLine":13,"endColumn":19},{"ruleId":"195","severity":1,"message":"223","line":14,"column":10,"nodeType":"197","messageId":"198","endLine":14,"endColumn":24},{"ruleId":"195","severity":1,"message":"224","line":20,"column":10,"nodeType":"197","messageId":"198","endLine":20,"endColumn":16},{"ruleId":"213","severity":1,"message":"214","line":99,"column":54,"nodeType":"215","messageId":"216","endLine":99,"endColumn":56},{"ruleId":"225","severity":1,"message":"226","line":101,"column":38,"nodeType":"215","messageId":"227","endLine":101,"endColumn":39},{"ruleId":"225","severity":1,"message":"226","line":101,"column":62,"nodeType":"215","messageId":"227","endLine":101,"endColumn":63},{"ruleId":"213","severity":1,"message":"214","line":120,"column":22,"nodeType":"215","messageId":"216","endLine":120,"endColumn":24},{"ruleId":"228","severity":1,"message":"229","line":13,"column":8,"nodeType":"230","messageId":"231","endLine":13,"endColumn":9,"fix":"232"},{"ruleId":"195","severity":1,"message":"233","line":16,"column":9,"nodeType":"197","messageId":"198","endLine":16,"endColumn":19},{"ruleId":"195","severity":1,"message":"234","line":5,"column":8,"nodeType":"197","messageId":"198","endLine":5,"endColumn":14},{"ruleId":"195","severity":1,"message":"200","line":6,"column":9,"nodeType":"197","messageId":"198","endLine":6,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":6,"column":16,"nodeType":"197","messageId":"198","endLine":6,"endColumn":22},{"ruleId":"195","severity":1,"message":"235","line":2,"column":17,"nodeType":"197","messageId":"198","endLine":2,"endColumn":25},{"ruleId":"236","severity":1,"message":"237","line":18,"column":9,"nodeType":"238","endLine":18,"endColumn":167},{"ruleId":"195","severity":1,"message":"205","line":22,"column":12,"nodeType":"197","messageId":"198","endLine":22,"endColumn":23},{"ruleId":"195","severity":1,"message":"200","line":3,"column":9,"nodeType":"197","messageId":"198","endLine":3,"endColumn":14},{"ruleId":"195","severity":1,"message":"201","line":3,"column":16,"nodeType":"197","messageId":"198","endLine":3,"endColumn":22},{"ruleId":"195","severity":1,"message":"221","line":6,"column":8,"nodeType":"197","messageId":"198","endLine":6,"endColumn":15},{"ruleId":"195","severity":1,"message":"202","line":8,"column":10,"nodeType":"197","messageId":"198","endLine":8,"endColumn":13},{"ruleId":"195","severity":1,"message":"239","line":9,"column":8,"nodeType":"197","messageId":"198","endLine":9,"endColumn":19},{"ruleId":"195","severity":1,"message":"222","line":21,"column":10,"nodeType":"197","messageId":"198","endLine":21,"endColumn":19},{"ruleId":"195","severity":1,"message":"240","line":22,"column":10,"nodeType":"197","messageId":"198","endLine":22,"endColumn":23},{"ruleId":"195","severity":1,"message":"241","line":23,"column":10,"nodeType":"197","messageId":"198","endLine":23,"endColumn":21},{"ruleId":"213","severity":1,"message":"214","line":76,"column":18,"nodeType":"215","messageId":"216","endLine":76,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":76,"column":38,"nodeType":"215","messageId":"216","endLine":76,"endColumn":40},{"ruleId":"213","severity":1,"message":"214","line":76,"column":58,"nodeType":"215","messageId":"216","endLine":76,"endColumn":60},{"ruleId":"213","severity":1,"message":"214","line":76,"column":78,"nodeType":"215","messageId":"216","endLine":76,"endColumn":80},{"ruleId":"213","severity":1,"message":"214","line":83,"column":17,"nodeType":"215","messageId":"216","endLine":83,"endColumn":19},{"ruleId":"213","severity":1,"message":"214","line":88,"column":18,"nodeType":"215","messageId":"216","endLine":88,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":92,"column":18,"nodeType":"215","messageId":"216","endLine":92,"endColumn":20},{"ruleId":"213","severity":1,"message":"214","line":97,"column":18,"nodeType":"215","messageId":"216","endLine":97,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":10,"column":8,"nodeType":"197","messageId":"198","endLine":10,"endColumn":14},{"ruleId":"195","severity":1,"message":"205","line":20,"column":12,"nodeType":"197","messageId":"198","endLine":20,"endColumn":23},{"ruleId":"195","severity":1,"message":"200","line":3,"column":10,"nodeType":"197","messageId":"198","endLine":3,"endColumn":15},{"ruleId":"195","severity":1,"message":"201","line":3,"column":17,"nodeType":"197","messageId":"198","endLine":3,"endColumn":23},{"ruleId":"195","severity":1,"message":"202","line":7,"column":10,"nodeType":"197","messageId":"198","endLine":7,"endColumn":13},{"ruleId":"195","severity":1,"message":"242","line":8,"column":8,"nodeType":"197","messageId":"198","endLine":8,"endColumn":24},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'handleOnClick' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'Box' is defined but never used.","'handleOnClick2' is defined but never used.","'CustomBox' is defined but never used.","'handleClick' is defined but never used.","'result' is assigned a value but never used.","'resultMessage4' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\ .","TemplateElement","unnecessaryEscape",["243","244"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleOnClick3' is defined but never used.","'PointResult' is assigned a value but never used.","'resultMessage3' is assigned a value but never used.","'smallBrStyle' is assigned a value but never used.","'Summary' is defined but never used.","'submitted' is assigned a value but never used.","'resultMessage2' is assigned a value but never used.","'iofreq' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"245","text":"246"},"'hoverStyle' is assigned a value but never used.","'Hiking' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'HomeContent' is defined but never used.","'resultMessage' is assigned a value but never used.","'showAnswers' is assigned a value but never used.","'StudentExercise0' is defined but never used.",{"messageId":"247","fix":"248","desc":"249"},{"messageId":"250","fix":"251","desc":"252"},[526,527],"","removeEscape",{"range":"253","text":"246"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"254","text":"255"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[4446,4447],[4446,4446],"\\"]