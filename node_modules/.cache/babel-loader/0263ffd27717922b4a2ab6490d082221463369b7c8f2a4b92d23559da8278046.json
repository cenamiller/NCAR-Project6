{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dixita\\\\projects\\\\NCAR-Project6\\\\src\\\\StudentExercises3.js\",\n  _s = $RefreshSig$();\n// Importing necessary dependencies and components\nimport React, { useState, useEffect } from 'react';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport Button from './Button';\nimport CustomBox from './Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudentExercise3 = () => {\n  _s();\n  // State variables\n  const [selectedNumber, setSelectedNumber] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [message, setMessage] = useState('');\n  const [result, setResult] = useState('');\n  const [numVar, setNumVar] = useState('');\n  const [wordSize, setwordSize] = useState('');\n  const [resultMessage4, setResultMessage4] = useState('');\n  const navigate = useNavigate();\n\n  // Function to handle input changes\n  const handleChange = event => {\n    const selectedOption = event.target.value;\n    setSelectedNumber(selectedOption);\n    if (selectedOption !== \"\") {\n      // Show the second question when the user selects an answer of first question\n      document.getElementById(\"question2\").style.display = \"block\";\n      if (selectedOption === \"1\") {\n        setMessage(\"Please enter a number\");\n      } else {\n        setMessage(`Please enter ${selectedOption} numbers separated by commas.`);\n      }\n    } else {\n      // Hide the second question if no option is selected\n      document.getElementById(\"question2\").style.display = \"none\";\n      setMessage(\"\");\n    }\n\n    // Store the selected option and second question visibility in local storage\n    localStorage.setItem(\"selectedNumber\", selectedOption);\n    localStorage.setItem(\"question2Visible\", selectedOption !== \"\");\n  };\n\n  // Function to handle form submission\n  //This function outputs answers based on the user's answers\n  const handleSubmit = () => {\n    // Get the value of the input field with the id \"nums\"\n    const numbersInput = document.getElementById(\"nums\").value;\n\n    // Split the numbersInput string using commas as separators and create an array\n    // Then, trim each element to remove any leading or trailing white spaces\n    const numbersArray = numbersInput.split(\",\").map(num => num.trim());\n\n    // Parse the selectedNumber value into an integer\n    const selectedOptionNum = parseInt(selectedNumber);\n\n    // this condition checks if the user has entered all the inputs before clicking submit\n    if (!numVar || !wordSize || !selectedNumber) {\n      alert(\"Please fill out all the feilds\"); //This message is shown if the user has not filled out all the inputs\n      return;\n    }\n\n    // Check if number of variables and word size are integers\n    if (isNaN(parseInt(numVar))) {\n      alert(\"Number of variables must be integers.\"); //This message is shown when the user enters non-interger values for Question 2: Number of Variables\n      return;\n    }\n\n    // Check if the length of the numbersArray is equal to the selectedOptionNum\n    if (numbersArray.length === selectedOptionNum) {\n      let validInputs = true; //set validInputs to true to flag valid inputs\n\n      // Check if all input numbers are valid integers\n      for (let i = 0; i < numbersArray.length; i++) {\n        const number = parseInt(numbersArray[i]);\n        if (isNaN(number)) {\n          validInputs = false;\n          break;\n        }\n      }\n      if (validInputs) {\n        // Calculate the product of all input numbers\n        let product = 1;\n        for (let i = 0; i < numbersArray.length; i++) {\n          const number = parseInt(numbersArray[i]);\n          product *= number;\n        }\n\n        //This line stores \"product\" variable in local storage so it can be retrieved and displayed in the summary page. \n        localStorage.setItem('product', product);\n\n        //working set size (wss) is calculated by multiplying \"product\", \"numVar\" and \"wordSize\"\n        let wss = product * parseInt(numVar) * parseInt(wordSize);\n        let result = \"\"; //An empty string named \"result\" is initialized which is later used to output the result message.\n\n        //string1 and string2 are concatenated at the start of the \"result\" string\n        const string1 = \"Next let us discuss both the return on the investment (ROI) converting your computational infrastructure to GPU-based computing and the difficulty with achieving this ROI.\";\n        const string2 = `\\t1. Let's first talk about Return on Investment.  You indicated that the extent of loop \\n\\t\\    bodies is approximately ${product}. You also indicated that a common loop body contains \\n\\t    ${numVar}, ${wordSize} bytes variables. This suggests that inner loops access ${wss} bytes of variables.`;\n\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is greater than 75\n        const wss1 = `a. Because  ${wss} wss is significantly larger than the typical last level cache size. \\n\\t\\t    Your problem should achieve a ROI of approximately 3 to 4 due to the \\n\\t\\t    differences in main memory bandwidth between CPU and GPU. Would a \\n\\t\\t    reduction in the time to perform your science of 3 to 4 have a significant \\n\\t\\t    impact on your ability to perform your science?`;\n\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is less than 75\n        const wss2 = `a. Because ${wss} wss is significantly smaller than the typical last level cache size. \\n\\t\\t    Your code is likely already running pretty efficiently on a CPU-based platform. \\n\\t\\t    GPU-enablement will yield a very modest ROI. `;\n        result = string1 + \"\\n\" + string2; //string1 and string2 are concatentaed the \"result\" string\n\n        if (wss > 75) {\n          // if \"wss\" is greater than 75, \"wss1\" is concatenated to the \"result\" string\n          result += \"\\n\\t\\t\" + wss1;\n        } else {\n          // if \"wss\" is less than 75, \"wss2\" is concatenated to the \"result\" string\n\n          result += \"\\n\\t\\t\" + wss2;\n        }\n        localStorage.setItem('selectedNumber', selectedNumber);\n        localStorage.setItem('numVar', numVar);\n        localStorage.setItem('wordSize', wordSize);\n        localStorage.setItem('inputValue', inputValue);\n        setResultMessage4(result); //This statement assigns \"result\" variable to the \"ResultMessage3\" variable\n        localStorage.setItem('resultMessage4', result); //This line stores \"result\" variable in local storage so it can be retrieved and displayed in the summary page. \n        navigate('/page4'); // This line of code is used to navigate to page 4\n      } else {\n        alert(\"Please enter valid numbers separated by commas.\"); //This message is shown when user enters non-integer values for Question1\n      }\n    } else {\n      if (selectedOptionNum == 1) {\n        alert(\"Please enter a number\");\n      } //This message is shown if \"selectedOptionNum\" is 1 but user enters more or less numbers\n      else if (selectedNumber) {\n        //Below message is shown if the number of intergers entered by the user is less than or greater than \"selectedOptionNum\"\n        alert(`Please enter ${selectedOptionNum} numbers separated by commas.`);\n      }\n    }\n  };\n\n  // Function to clear options and reset the form\n  const handleClear = () => {\n    setSelectedNumber('');\n    setMessage(\"\");\n    setInputValue(\"\");\n    setResult(\"\");\n    setResultMessage4(\"\");\n    setwordSize(\" \");\n    setNumVar(\"\");\n    document.getElementById(\"question2\").style.display = \"none\";\n  };\n  function handleOnClick3(event) {\n    navigate('/page4');\n  }\n  ;\n  function handleOnClick(event) {\n    navigate('/page2'); // Navigate to '/page2' when the button is clicked\n  }\n  ;\n  useEffect(() => {\n    // Load data from local storage when the component mounts\n    const selectedOption = localStorage.getItem('selectedNumber');\n    const numVarValue = localStorage.getItem('numVar');\n    const wordSizeValue = localStorage.getItem('wordSize');\n    const inputValueValue = localStorage.getItem('inputValue');\n    const question2Visible = localStorage.getItem('question2Visible'); // Retrieve the second question visibility\n\n    setSelectedNumber(selectedOption || ''); // Use empty string as default if null or undefined\n    setNumVar(numVarValue || '');\n    setwordSize(wordSizeValue || '');\n    setInputValue(inputValueValue || '');\n\n    // Set the visibility of the second question based on the value retrieved from local storage\n    if (question2Visible === \"true\") {\n      document.getElementById(\"question2\").style.display = \"block\";\n    } else {\n      document.getElementById(\"question2\").style.display = \"none\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CustomBox, {\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"How many levels of nesting are there?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 57\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"mySelect\",\n            value: selectedNumber,\n            onChange: handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              disabled: true,\n              selected: true,\n              value: \"\",\n              children: \"Choose a number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1\",\n              children: \"1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"3\",\n              children: \"3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"4\",\n              children: \"4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"5\",\n              children: \"5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"question2\",\n            style: {\n              display: 'none'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              id: \"message2\",\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nums\",\n              placeholder: \"Enter Here\",\n              value: inputValue,\n              onChange: event => setInputValue(event.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"How many variables are typically found in a loopbody expressions ? \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 9\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 86\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: numVar,\n              placeholder: \"Enter Here\",\n              onChange: e => setNumVar(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Are you using 4 byte or 8 bytes floating point values ? \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 74\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"wordsize\",\n              value: \"4\",\n              checked: wordSize === \"4\",\n              onChange: e => setwordSize(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), \"4 Bytes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            style: {\n              marginLeft: '70px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              name: \"wordsize\",\n              value: \"8\",\n              checked: wordSize === \"8\",\n              onChange: e => setwordSize(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this), \"8 Bytes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"249px\",\n          marginBottom: \"100px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          text: \"Back\",\n          onClick: handleOnClick,\n          style: {\n            padding: \"10px 28px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Clear\",\n          onClick: handleClear,\n          style: {\n            marginLeft: \"10px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Submit\",\n          onClick: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n};\n_s(StudentExercise3, \"fA9HA0H6BxxiWbYGxXUCkI21VOM=\", false, function () {\n  return [useNavigate];\n});\n_c = StudentExercise3;\nexport default StudentExercise3;\nvar _c;\n$RefreshReg$(_c, \"StudentExercise3\");","map":{"version":3,"names":["React","useState","useEffect","Route","Routes","useNavigate","Button","CustomBox","jsxDEV","_jsxDEV","StudentExercise3","_s","selectedNumber","setSelectedNumber","inputValue","setInputValue","message","setMessage","result","setResult","numVar","setNumVar","wordSize","setwordSize","resultMessage4","setResultMessage4","navigate","handleChange","event","selectedOption","target","value","document","getElementById","style","display","localStorage","setItem","handleSubmit","numbersInput","numbersArray","split","map","num","trim","selectedOptionNum","parseInt","alert","isNaN","length","validInputs","i","number","product","wss","string1","string2","wss1","wss2","handleClear","handleOnClick3","handleOnClick","getItem","numVarValue","wordSizeValue","inputValueValue","question2Visible","children","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","disabled","selected","type","placeholder","e","name","checked","marginLeft","marginBottom","text","onClick","padding","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/dixita/projects/NCAR-Project6/src/StudentExercises3.js"],"sourcesContent":["// Importing necessary dependencies and components\r\nimport React, { useState , useEffect } from 'react';\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport Button from './Button';\r\nimport CustomBox from './Box';\r\n\r\n\r\nconst StudentExercise3 = () => {\r\n  // State variables\r\n  const [selectedNumber, setSelectedNumber] = useState('');\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [result, setResult] = useState('');\r\n  const [numVar, setNumVar] = useState('');\r\n  const [wordSize, setwordSize] = useState('');\r\n  const [resultMessage4, setResultMessage4] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  // Function to handle input changes\r\n  const handleChange = (event) => {\r\n    const selectedOption = event.target.value;\r\n    setSelectedNumber(selectedOption);\r\n\r\n    if (selectedOption !== \"\") {\r\n      // Show the second question when the user selects an answer of first question\r\n      document.getElementById(\"question2\").style.display = \"block\";\r\n      if (selectedOption === \"1\") {\r\n        setMessage(\"Please enter a number\");\r\n      } else {\r\n        setMessage(`Please enter ${selectedOption} numbers separated by commas.`);\r\n      }\r\n    } else {\r\n      // Hide the second question if no option is selected\r\n      document.getElementById(\"question2\").style.display = \"none\";\r\n      setMessage(\"\");\r\n    }\r\n\r\n    // Store the selected option and second question visibility in local storage\r\n    localStorage.setItem(\"selectedNumber\", selectedOption);\r\n    localStorage.setItem(\"question2Visible\", selectedOption !== \"\");\r\n  };\r\n\r\n\r\n  // Function to handle form submission\r\n  //This function outputs answers based on the user's answers\r\n  const handleSubmit = () => {\r\n    // Get the value of the input field with the id \"nums\"\r\n    const numbersInput = document.getElementById(\"nums\").value; \r\n\r\n    // Split the numbersInput string using commas as separators and create an array\r\n    // Then, trim each element to remove any leading or trailing white spaces\r\n    const numbersArray = numbersInput.split(\",\").map((num) => num.trim());\r\n\r\n    // Parse the selectedNumber value into an integer\r\n    const selectedOptionNum = parseInt(selectedNumber);\r\n\r\n    // this condition checks if the user has entered all the inputs before clicking submit\r\n    if(!numVar || !wordSize || !selectedNumber){\r\n      alert(\"Please fill out all the feilds\") //This message is shown if the user has not filled out all the inputs\r\n      return;\r\n\r\n    }\r\n\r\n    // Check if number of variables and word size are integers\r\n    if (isNaN(parseInt(numVar)) ) {\r\n      alert(\"Number of variables must be integers.\"); //This message is shown when the user enters non-interger values for Question 2: Number of Variables\r\n      return;\r\n    }\r\n    \r\n    // Check if the length of the numbersArray is equal to the selectedOptionNum\r\n    if (numbersArray.length === selectedOptionNum) {\r\n      let validInputs = true; //set validInputs to true to flag valid inputs\r\n\r\n      // Check if all input numbers are valid integers\r\n      for (let i = 0; i < numbersArray.length; i++) {\r\n        const number = parseInt(numbersArray[i]);\r\n        if (isNaN(number)) {\r\n          validInputs = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (validInputs) {\r\n        // Calculate the product of all input numbers\r\n        let product = 1;\r\n\r\n        for (let i = 0; i < numbersArray.length; i++) {\r\n          const number = parseInt(numbersArray[i]);\r\n          product *= number;\r\n        }\r\n\r\n        //This line stores \"product\" variable in local storage so it can be retrieved and displayed in the summary page. \r\n        localStorage.setItem('product', product);\r\n        \r\n\r\n        //working set size (wss) is calculated by multiplying \"product\", \"numVar\" and \"wordSize\"\r\n        let wss = product * parseInt(numVar) * parseInt(wordSize)\r\n\r\n\r\n        let result = \"\" //An empty string named \"result\" is initialized which is later used to output the result message.\r\n\r\n        //string1 and string2 are concatenated at the start of the \"result\" string\r\n        const string1 = \"Next let us discuss both the return on the investment (ROI) converting your computational infrastructure to GPU-based computing and the difficulty with achieving this ROI.\"\r\n        const string2 = `\\t1. Let's first talk about Return on Investment.  You indicated that the extent of loop \\n\\t\\    bodies is approximately ${product}. You also indicated that a common loop body contains \\n\\t    ${numVar}, ${wordSize} bytes variables. This suggests that inner loops access ${wss} bytes of variables.`\r\n\r\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is greater than 75\r\n        const wss1 = `a. Because  ${wss} wss is significantly larger than the typical last level cache size. \\n\\t\\t    Your problem should achieve a ROI of approximately 3 to 4 due to the \\n\\t\\t    differences in main memory bandwidth between CPU and GPU. Would a \\n\\t\\t    reduction in the time to perform your science of 3 to 4 have a significant \\n\\t\\t    impact on your ability to perform your science?`\r\n\r\n        //wws1 is concatenated the to \"result\" string if the value of \"wss\" is less than 75\r\n        const wss2 = `a. Because ${wss} wss is significantly smaller than the typical last level cache size. \\n\\t\\t    Your code is likely already running pretty efficiently on a CPU-based platform. \\n\\t\\t    GPU-enablement will yield a very modest ROI. `\r\n\r\n        result = string1 + \"\\n\" + string2 //string1 and string2 are concatentaed the \"result\" string\r\n\r\n        if (wss > 75){\r\n        // if \"wss\" is greater than 75, \"wss1\" is concatenated to the \"result\" string\r\n          result += \"\\n\\t\\t\" + wss1\r\n\r\n        } else {\r\n\r\n        // if \"wss\" is less than 75, \"wss2\" is concatenated to the \"result\" string\r\n\r\n          result += \"\\n\\t\\t\" + wss2\r\n\r\n        }\r\n        localStorage.setItem('selectedNumber', selectedNumber);\r\n        localStorage.setItem('numVar', numVar);\r\n        localStorage.setItem('wordSize', wordSize);\r\n        localStorage.setItem('inputValue', inputValue);\r\n\r\n        setResultMessage4 (result);//This statement assigns \"result\" variable to the \"ResultMessage3\" variable\r\n        localStorage.setItem('resultMessage4', result); //This line stores \"result\" variable in local storage so it can be retrieved and displayed in the summary page. \r\n        navigate('/page4'); // This line of code is used to navigate to page 4\r\n\r\n\r\n\r\n\r\n      } else {\r\n        alert(\"Please enter valid numbers separated by commas.\"); //This message is shown when user enters non-integer values for Question1\r\n      }\r\n    } else {\r\n        if (selectedOptionNum == 1){\r\n        alert(\"Please enter a number\")} //This message is shown if \"selectedOptionNum\" is 1 but user enters more or less numbers\r\n        else if (selectedNumber){\r\n        \r\n          //Below message is shown if the number of intergers entered by the user is less than or greater than \"selectedOptionNum\"\r\n        alert(`Please enter ${selectedOptionNum} numbers separated by commas.`)\r\n        }\r\n\r\n      }\r\n\r\n     \r\n\r\n  \r\n};\r\n\r\n  \r\n// Function to clear options and reset the form\r\n  const handleClear = () => {\r\n\r\n    setSelectedNumber('');\r\n    setMessage(\"\");\r\n    setInputValue(\"\");\r\n    setResult(\"\");\r\n    setResultMessage4 (\"\");\r\n    setwordSize(\" \")\r\n    setNumVar(\"\")\r\n    document.getElementById(\"question2\").style.display = \"none\";\r\n\r\n};\r\n\r\nfunction handleOnClick3(event) {\r\n  navigate('/page4');\r\n};\r\n\r\n\r\nfunction handleOnClick(event) {\r\n  navigate('/page2'); // Navigate to '/page2' when the button is clicked\r\n};\r\n\r\nuseEffect(() => {\r\n  // Load data from local storage when the component mounts\r\n  const selectedOption = localStorage.getItem('selectedNumber');\r\n  const numVarValue = localStorage.getItem('numVar');\r\n  const wordSizeValue = localStorage.getItem('wordSize');\r\n  const inputValueValue = localStorage.getItem('inputValue');\r\n  const question2Visible = localStorage.getItem('question2Visible'); // Retrieve the second question visibility\r\n\r\n  setSelectedNumber(selectedOption || ''); // Use empty string as default if null or undefined\r\n  setNumVar(numVarValue || '');\r\n  setwordSize(wordSizeValue || '');\r\n  setInputValue(inputValueValue || '');\r\n\r\n   // Set the visibility of the second question based on the value retrieved from local storage\r\n   if (question2Visible === \"true\") {\r\n    document.getElementById(\"question2\").style.display = \"block\";\r\n  } else {\r\n    document.getElementById(\"question2\").style.display = \"none\";\r\n  }\r\n}, []);\r\n\r\n\r\n  return (\r\n    <div >\r\n\r\n      <div >\r\n        <CustomBox>\r\n        <ol>\r\n          {/*Question 1 */}\r\n          <li>How many levels of nesting are there?</li><br></br>\r\n\r\n          <select id=\"mySelect\" value={selectedNumber} onChange={handleChange}>\r\n            <option disabled selected value=\"\">\r\n              Choose a number\r\n            </option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n            <option value=\"3\">3</option>\r\n            <option value=\"4\">4</option>\r\n            <option value=\"5\">5</option>\r\n          </select>\r\n\r\n          <br />\r\n          {/*Question 1a- This question is displayed after the user selects an option for question 1*/}\r\n          <div id=\"question2\" style={{ display: 'none' }}>\r\n            <p id=\"message2\">{message}</p>\r\n            <input\r\n              type=\"text\"\r\n              id=\"nums\"\r\n              placeholder=\"Enter Here\"\r\n              value={inputValue}\r\n              onChange={(event) => setInputValue(event.target.value)}\r\n            /> \r\n      \r\n          {/*<p style = {{marginTop:\"40px\"}}>What kind of Return on Investment (ROI) would you expect?</p>*/}\r\n      \r\n          </div><br></br>\r\n        <div>\r\n          {/*Question 2*/}\r\n        <li>How many variables are typically found in a loopbody expressions ? </li> <br></br>\r\n        <input\r\n          type=\"text\"\r\n          value={numVar}\r\n          placeholder=\"Enter Here\"\r\n          onChange={(e) => setNumVar(e.target.value)}\r\n          \r\n        /></div><br></br>\r\n        {/*Question 3 */}\r\n        <li>Are you using 4 byte or 8 bytes floating point values ? </li><br></br>\r\n      \r\n          <label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"wordsize\"\r\n                value=\"4\"\r\n                checked={wordSize === \"4\"}\r\n                onChange={(e) => setwordSize(e.target.value)}\r\n              />\r\n                4 Bytes\r\n          </label>\r\n\r\n  \r\n          <label style={{ marginLeft: '70px' }}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"wordsize\"\r\n                value=\"8\"\r\n                checked={wordSize === \"8\"}\r\n                onChange={(e) => setwordSize(e.target.value)}\r\n                />\r\n              8 Bytes\r\n          </label>\r\n         \r\n\r\n\r\n\r\n\r\n        </ol>\r\n        </CustomBox>\r\n                \r\n        <div style = {{marginLeft: \"249px\", marginBottom: \"100px\"}}>\r\n          <Button text=\"Back\" onClick={handleOnClick} style={{ padding: \"10px 28px\" }} /> {/* Render a button with 'Back' text, handleOnClick event handler, and custom styling */}\r\n            {/*Submit Button*/}\r\n            \r\n\r\n            {/*Clear Button*/}\r\n            <Button text = \"Clear\" onClick = {handleClear} style ={{ marginLeft : \"10px\" , marginRight:\"10px\"}}/>\r\n            <Button text = \"Submit\" onClick = {handleSubmit} />\r\n            \r\n          </div> <br></br><br></br>\r\n          {/*Get Results Button - Takes the user to the summary page*/}\r\n          {/*<Button text = \"Get Results\" onClick = {handleOnClick3} style = {{ padding: \"10px 28px\"}}/>*/}\r\n          \r\n      </div>\r\n\r\n\r\n\r\n\r\n      \r\n      \r\n\r\n      {/*<p>What kind of Return on Investment (ROI) would you expect?</p>*/}\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudentExercise3;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}