{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dixita\\\\projects\\\\VSC_Website 2\\\\test\\\\src\\\\ProgressBar.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = props => {\n  const {\n    bgcolor,\n    completed\n  } = props;\n  const containerStyles = {\n    height: 20,\n    width: '80%',\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50,\n    margin: 50\n  };\n  const fillerStyles = {\n    height: '100%',\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    borderRadius: 'inherit',\n    textAlign: 'right'\n  };\n  const labelStyles = {\n    padding: 5,\n    color: 'white',\n    fontWeight: 'bold'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: fillerStyles,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        style: labelStyles,\n        children: `${completed}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c = ProgressBar;\nconst MyPageComponent = () => {\n  _s();\n  const [progress, setProgress] = React.useState(0);\n  const location = useLocation();\n\n  // Function to update the progress value based on the current page\n  const updateProgress = currentPage => {\n    // Logic to determine the progress percentage based on the current page\n    let progressPercentage = 0;\n    if (currentPage === '') {\n      progressPercentage = 33.33;\n    } else if (currentPage === 'page2') {\n      progressPercentage = 66.66;\n    } else if (currentPage === 'page3') {\n      progressPercentage = 100;\n    }\n    setProgress(progressPercentage);\n  };\n\n  // Call the updateProgress function whenever the page changes\n  React.useEffect(() => {\n    const {\n      pathname\n    } = location;\n    const currentPage = pathname.substring(1); // Remove the leading \"/\"\n    updateProgress(currentPage);\n  }, [location]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n      bgcolor: \"#36545d\",\n      completed: progress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(MyPageComponent, \"xi4jTsmgJznKQsKx2Z17gv4DZAM=\", false, function () {\n  return [useLocation];\n});\n_c2 = MyPageComponent;\nexport default MyPageComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProgressBar\");\n$RefreshReg$(_c2, \"MyPageComponent\");","map":{"version":3,"names":["React","useLocation","jsxDEV","_jsxDEV","ProgressBar","props","bgcolor","completed","containerStyles","height","width","backgroundColor","borderRadius","margin","fillerStyles","textAlign","labelStyles","padding","color","fontWeight","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MyPageComponent","_s","progress","setProgress","useState","location","updateProgress","currentPage","progressPercentage","useEffect","pathname","substring","_c2","$RefreshReg$"],"sources":["C:/Users/dixita/projects/VSC_Website 2/test/src/ProgressBar.js"],"sourcesContent":["import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst ProgressBar = (props) => {\r\n  const { bgcolor, completed } = props;\r\n\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: '80%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    margin: 50\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right'\r\n  }\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles}>\r\n        <span style={labelStyles}>{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MyPageComponent = () => {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const location = useLocation();\r\n\r\n  // Function to update the progress value based on the current page\r\n  const updateProgress = (currentPage) => {\r\n    // Logic to determine the progress percentage based on the current page\r\n    let progressPercentage = 0;\r\n    if (currentPage === '') {\r\n      progressPercentage = 33.33;\r\n    } else if (currentPage === 'page2') {\r\n      progressPercentage = 66.66;\r\n    } else if (currentPage === 'page3') {\r\n      progressPercentage = 100;\r\n    } \r\n\r\n    setProgress(progressPercentage);\r\n  };\r\n\r\n  // Call the updateProgress function whenever the page changes\r\n  React.useEffect(() => {\r\n    const { pathname } = location;\r\n    const currentPage = pathname.substring(1); // Remove the leading \"/\"\r\n    updateProgress(currentPage);\r\n  }, [location]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Render the progress bar component */}\r\n      <ProgressBar bgcolor=\"#36545d\" completed={progress} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPageComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAGF,KAAK;EAEpC,MAAMG,eAAe,GAAG;IACtBC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,KAAK;IACZC,eAAe,EAAE,SAAS;IAC1BC,YAAY,EAAE,EAAE;IAChBC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,YAAY,GAAG;IACnBL,MAAM,EAAE,MAAM;IACdC,KAAK,EAAG,GAAEH,SAAU,GAAE;IACtBI,eAAe,EAAEL,OAAO;IACxBM,YAAY,EAAE,SAAS;IACvBG,SAAS,EAAE;EACb,CAAC;EAED,MAAMC,WAAW,GAAG;IAClBC,OAAO,EAAE,CAAC;IACVC,KAAK,EAAE,OAAO;IACdC,UAAU,EAAE;EACd,CAAC;EAED,oBACEhB,OAAA;IAAKiB,KAAK,EAAEZ,eAAgB;IAAAa,QAAA,eAC1BlB,OAAA;MAAKiB,KAAK,EAAEN,YAAa;MAAAO,QAAA,eACvBlB,OAAA;QAAMiB,KAAK,EAAEJ,WAAY;QAAAK,QAAA,EAAG,GAAEd,SAAU;MAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GAhCItB,WAAW;AAkCjB,MAAMuB,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,KAAK,CAAC+B,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMgC,cAAc,GAAIC,WAAW,IAAK;IACtC;IACA,IAAIC,kBAAkB,GAAG,CAAC;IAC1B,IAAID,WAAW,KAAK,EAAE,EAAE;MACtBC,kBAAkB,GAAG,KAAK;IAC5B,CAAC,MAAM,IAAID,WAAW,KAAK,OAAO,EAAE;MAClCC,kBAAkB,GAAG,KAAK;IAC5B,CAAC,MAAM,IAAID,WAAW,KAAK,OAAO,EAAE;MAClCC,kBAAkB,GAAG,GAAG;IAC1B;IAEAL,WAAW,CAACK,kBAAkB,CAAC;EACjC,CAAC;;EAED;EACAnC,KAAK,CAACoC,SAAS,CAAC,MAAM;IACpB,MAAM;MAAEC;IAAS,CAAC,GAAGL,QAAQ;IAC7B,MAAME,WAAW,GAAGG,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3CL,cAAc,CAACC,WAAW,CAAC;EAC7B,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC;EAEd,oBACE7B,OAAA;IAAAkB,QAAA,eAEElB,OAAA,CAACC,WAAW;MAACE,OAAO,EAAC,SAAS;MAACC,SAAS,EAAEsB;IAAS;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV,CAAC;AAACG,EAAA,CAhCID,eAAe;EAAA,QAEF1B,WAAW;AAAA;AAAAsC,GAAA,GAFxBZ,eAAe;AAkCrB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAd,EAAA;AAAAc,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}