{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dixita\\\\projects\\\\VSC_Website 2\\\\test\\\\src\\\\CalcOne.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalcOne = _ref => {\n  _s();\n  let {\n    onDivisionResultChange\n  } = _ref;\n  const [inputOne, setInputOne] = useState('');\n  const [inputTwo, setInputTwo] = useState('');\n  const [divisionResult, setDivisionResult] = useState('');\n  const handleCalculation = () => {\n    const x = parseFloat(inputOne);\n    const y = parseFloat(inputTwo);\n    if (!isNaN(x) && !isNaN(y)) {\n      const division = x / y;\n      setDivisionResult(division);\n      onDivisionResultChange(division); // Call the callback function with the division result\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Determine the following:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Total number of independent grid-points\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputOne,\n        onChange: e => setInputOne(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Number of {node, GPU}: per run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputTwo,\n        onChange: e => setInputTwo(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCalculation,\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of grid-points per {node, GPU}: \", divisionResult]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(CalcOne, \"3EZRBqOTCUjsLpszkLW0F2e2OFU=\");\n_c = CalcOne;\nexport default CalcOne;\nvar _c;\n$RefreshReg$(_c, \"CalcOne\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CalcOne","_ref","_s","onDivisionResultChange","inputOne","setInputOne","inputTwo","setInputTwo","divisionResult","setDivisionResult","handleCalculation","x","parseFloat","y","isNaN","division","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dixita/projects/VSC_Website 2/test/src/CalcOne.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CalcOne = ({ onDivisionResultChange }) => {\r\n  const [inputOne, setInputOne] = useState('');\r\n  const [inputTwo, setInputTwo] = useState('');\r\n  const [divisionResult, setDivisionResult] = useState('');\r\n\r\n  const handleCalculation = () => {\r\n    const x = parseFloat(inputOne);\r\n    const y = parseFloat(inputTwo);\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      const division = x / y;\r\n      setDivisionResult(division);\r\n      onDivisionResultChange(division); // Call the callback function with the division result\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ol>\r\n        <li>Determine the following:</li>\r\n        <p>Total number of independent grid-points</p>\r\n        <input\r\n          type=\"text\"\r\n          value={inputOne}\r\n          onChange={(e) => setInputOne(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <p>Number of &#123;node, GPU&#125;: per run</p>\r\n        <input\r\n          type=\"text\"\r\n          value={inputTwo}\r\n          onChange={(e) => setInputTwo(e.target.value)}\r\n        />\r\n        <br />\r\n        <br />\r\n        <button onClick={handleCalculation}>Calculate</button>\r\n        <p>Number of grid-points per &#123;node, GPU&#125;: {divisionResult}</p>\r\n      </ol>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CalcOne;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}